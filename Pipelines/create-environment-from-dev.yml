# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
pr: none

parameters:
- name: EnvironmentDisplayName
  displayName: Environment Display Name
  type: string
  default: ''
- name: EnvironmentName
  displayName: Environment Name
  type: string
  default: ''
- name: EnvironmentType
  displayName: Environment Copy Method
  type: string
  default: New + Solution
  values:
  - New + Solution
  - New + Solution + Data
  - MinimalCopy
  - FullCopy
- name: NewBranchName
  displayName: New Branch Name
  type: string
  default: ''

pool:
  name: Azure Pipelines
  vmImage: windows-latest

variables:
- group: "dev-scope"
- group: "project-scope"

steps:
- script: |
   git checkout -b ${{parameters.NewBranchName}} sprint
  displayName: 'Create New Git Branch: ${{parameters.NewBranchName}}'
  workingDirectory: $(Build.SourcesDirectory)\dpam
  condition: and(succeeded(), ne(parameters.NewBranchName, ''))
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.tool-installer.PowerPlatformToolInstaller@0
  displayName: 'Power Platform Tool Installer '

- ${{ if or(eq(parameters.EnvironmentType, 'New + Solution'), eq(parameters.EnvironmentType, 'New + Solution + Data')) }}:
  - task: microsoft-IsvExpTools.PowerPlatform-BuildTools.create-environment.PowerPlatformCreateEnvironment@0
    displayName: 'Power Platform Create Environment '
    inputs:
      authenticationType: PowerPlatformSPN
      PowerPlatformSPN: $(EnvironmentUrl)
      DisplayName: ${{parameters.EnvironmentDisplayName}}
      AppsTemplate: 'D365_CustomerService,D365_Sales'
      LocationName: europe
      CurrencyName: EUR
      DomainName: ${{parameters.EnvironmentName}}
  
  - ${{ if eq(parameters.EnvironmentType, 'New + Solution + Data') }}:
    - template: import-configuration-data.yml
      parameters:
        environmentName: ${{parameters.EnvironmentName}}
        configDataFile: "$(Build.ArtifactStagingDirectory)/ConfigData.zip"
    - template: import-configuration-data.yml
      parameters:
        environmentName: ${{parameters.EnvironmentName}}
        configDataFile: "$(Build.ArtifactStagingDirectory)/ConfigData-$(EnvironmentName).zip"

- ${{ else }}:
  - task: microsoft-IsvExpTools.PowerPlatform-BuildTools.copy-environment.PowerPlatformCopyEnvironment@0
    displayName: 'Power Platform Copy Environment '
    inputs:
      authenticationType: PowerPlatformSPN
      PowerPlatformSPN: $(EnvironmentUrl)
      TargetEnvironmentUrl: ${{parameters.EnvironmentName}}
      CopyType: ${{parameters.EnvironmentType}}
      OverrideFriendlyName: true
      FriendlyName: ${{parameters.EnvironmentDisplayName}}