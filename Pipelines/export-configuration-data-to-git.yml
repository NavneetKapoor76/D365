trigger: none
pr: none

variables:
- group: project-scope

parameters:
- name: EnvironmentName
  displayName: Environment Name
  type: string

pool:
  name: Azure Pipelines
  vmImage: windows-latest

steps:
# Checkout our Branch
- checkout: git://$(Project)/$(Repo)@$(Build.SourceBranchName)
  displayName: 'Checkout Source Branch'

# Set pipeline vars for tools paths.
- template: Templates\set-tools-paths.yml

# Restore PowerShell Module dependencies if available in cache
# https://docs.microsoft.com/en-us/azure/devops/pipelines/release/caching?view=azure-devops
- task: Cache@2
  displayName: Cache Powershell Modules
  inputs:
    key:  restoremodules | "$(powerPlatformToolsSubPath)" | $(Build.SourcesDirectory)/Pipelines/Templates/install-powershell-modules.yml
    path: $(powerPlatformToolsPath)
    cacheHitVar: powerPlatformToolsPath_IsCached

# Configure email/name and checkout git branch
- script: |
    git config user.email $(Build.RequestedForEmail)
    git config user.name $(Build.RequestedFor)
    git checkout origin/$(Build.SourceBranchName) --track
  workingDirectory: $(Build.SourcesDirectory)
  displayName: 'Initialize Git'

- template: Templates\install-powershell-modules.yml

- template: Templates\export-configuration-data.yml
  parameters:
    configDataSchemaFile: $(Build.SourcesDirectory)\Config\environment-data-schema.xml
    environmentName: '${{parameters.EnvironmentName}}'

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Pipeline.Workspace)'
    Contents: '**\*.log'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
  condition: failed()

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifact: 'logs'
    publishLocation: 'pipeline'
  condition: failed()

# We'll store configuration data as artifacts on the build pipeline to be used during deployment. This includes configuration data created via Configuration data migration tool and deploymentSettings.json and customDeploymentSettings.json 
- powershell: |
    $path = "$(ConfigurationMigrationFilePath)"
    if(Test-Path $path) {
        $extract = @{
            Path = $path
            DestinationPath = '$(Build.SourcesDirectory)/Config/${{parameters.EnvironmentName}}/Data'
        }
        Expand-Archive @extract
    }
  displayName: 'Archive Configuration Migration Data'
  enabled: true

- powershell: |
    git add --all
  workingDirectory: $(Build.SourcesDirectory)
  displayName: 'Add Changes to Git Branch'

# Commit all changes to Git branch. If there are no changes we want to warn the user that there was nothing to commit. As this could mean there was a user error involved.
- powershell: |
    $gitStatus = iex "git status --porcelain"
    if ($gitStatus) {
        git commit -m "Configuration data exported for environment ${{parameters.EnvironmentName}}"
    }
    else {
        Write-Host "##vso[task.logissue type=warning]There is nothing to commit. No changes have been made since the previous commit. If this is unexpected make sure your changes have been published before committing again."
        exit 1;
    }
  workingDirectory: $(Build.SourcesDirectory)
  displayName: 'Commit Changes to Git Branch'
  continueOnError: true

- script: |
    git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin $(Build.SourceBranchName)
  workingDirectory: $(Build.SourcesDirectory)
  displayName: 'Push to $(Branch) Remote Branch'
  condition: succeeded()
