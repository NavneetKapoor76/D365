trigger: none
pr: none

pool:
  name: Azure Pipelines
  vmImage: windows-latest

stages:
- stage: preBuild
  displayName: 'Align Dev with Git Repo' 
  jobs:
  - job: preBuild
    pool: 
      vmImage: 'windows-latest'
    steps:
    # Configure email/name and checkout git branch
    - script: |
        git config user.email "$(Build.RequestedForEmail)"
        git config user.name "$(Build.RequestedFor)"
        git checkout origin/$(Build.SourceBranchName) --track
      workingDirectory: $(Build.SourcesDirectory)
      displayName: 'Initialize Git'
    - powershell: |
        New-Item -Path '$(Build.SourcesDirectory)\Solutions\dummyfile_$(Build.BuildNumber).txt' -ItemType File
        git add --all
      workingDirectory: $(Build.SourcesDirectory)
      displayName: 'Add Changes to Git Branch'

    # Commit all changes to Git branch. If there are no changes we want to warn the user that there was nothing to commit. As this could mean there was a user error involved.
    - powershell: |
        git commit -m "test staging error with wrong HEAD"
      workingDirectory: $(Build.SourcesDirectory)
      displayName: 'Commit Changes to Git Branch'
      continueOnError: true
    - script: |
        git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin $(Build.SourceBranchName)
      workingDirectory: $(Build.SourcesDirectory)
      displayName: 'Push to $(Branch) Remote Branch'
      condition: succeeded()
- stage: build
  displayName: 'Build'
  dependsOn: preBuild
  jobs:
  - job: build
    pool: 
      vmImage: 'windows-latest'
    steps:
    - checkout: none
    - script: |
        git checkout origin/$(Build.SourceBranchName) --track
      workingDirectory: $(Build.SourcesDirectory)
      displayName: 'Initialize Git'
    - powershell: |
        git status
      workingDirectory: $(Build.SourcesDirectory)
      displayName: 'Commit Changes to Git Branch'
      continueOnError: true
- stage: deploy
  displayName: 'Deploy'
  dependsOn: build
  jobs:
  - job: deploy
    pool: 
      vmImage: 'windows-latest'
    steps:
    - powershell: |
        git status
      workingDirectory: $(Build.SourcesDirectory)
      displayName: 'Commit Changes to Git Branch'
      continueOnError: true