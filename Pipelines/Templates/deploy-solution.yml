# This is a deployment template referenced from build-deploy-Solution.yml

# build-deploy-Solution.yml calls this template twice, passing different connection information for test vs prod
parameters:
- name: serviceConnection
  type: string
- name: importUnmanaged
  type: string
  default: 'false'
- name: overwriteUnmanagedCustomizations
  type: string
  default: 'true'
- name: skipBuildToolsInstaller
  type: string
  default: 'false'

steps:
- script: |
    git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" pull origin $(Build.SourceBranchName)
  workingDirectory: $(Build.SourcesDirectory)
  displayName: 'Git: Get latest version'

- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.tool-installer.PowerPlatformToolInstaller@0
  displayName: 'Install Power Platform Build Tools'
  condition: and(succeeded(), eq('${{parameters.skipBuildToolsInstaller}}', 'false'))

# Get the solution package from artifact uploaded by the build pipeline
- task: DownloadPipelineArtifact@2
  displayName: 'Download Build Pipeline Artifact'

- powershell: |
   $artifactDropPath = '$(Pipeline.Workspace)/drop/'
   If (Test-Path -Path "$(Pipeline.Workspace)/buildPipeline/drop")
   {
       $artifactDropPath = "$(Pipeline.Workspace)/buildPipeline/drop/"
   }
   Write-Host "##vso[task.setVariable variable=ArtifactDropPath]$artifactDropPath"
  displayName: 'Get artifact drop path'

# Set paths to deployment settings
- template: set-deployment-configuration-paths.yml
  parameters:
    environmentName: $(EnvironmentName)

# If called from import-unmanaged-to-dev-environment.yml, this task will run to deploy an unmanaged solution
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.import-solution.PowerPlatformImportSolution@0
  displayName: 'Import Unmanaged Solution'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: '${{parameters.serviceConnection}}'
    SolutionInputFile: '$(ArtifactDropPath)/$(SolutionName)_$(SolutionVersion).zip'
    PublishWorkflows: true
    UseDeploymentSettingsFile: $(UseDeploymentSettings)
    DeploymentSettingsFile: $(DeploymentSettingsPath)
    AsyncOperation: true
    MaxAsyncWaitTime: 120
  condition: and(succeeded(), eq('${{parameters.importUnmanaged}}', 'true'))

- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.publish-customizations.PowerPlatformPublishCustomizations@0
  displayName: 'Power Platform Publish Customizations '
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: '${{parameters.serviceConnection}}'
  condition: and(succeeded(), eq('${{parameters.importUnmanaged}}', 'true'))
  timeoutInMinutes: 20
  retryCountOnTaskFailure: 3

  # Only publish customizations for when importing unmanaged solutions into a dev environment.

- powershell: |
    $managedSolutionPath = ''
    $artifactDropPath = "$(Pipeline.Workspace)/buildPipeline/drop/"
    #Attempt to find the managed solution in the build pipeline drop if build and deploy are seperate pipelines
    Get-ChildItem -Path "$(ArtifactDropPath)" -Filter "$(SolutionName)*.zip" | 
    ForEach-Object {
        If ($_.FullName.Contains("_managed")) 
        { 
            $managedSolutionPath = $_.FullName 
        }
    }
    Write-Host "##vso[task.setVariable variable=ManagedSolutionPath]$managedSolutionPath"
  displayName: 'Get managed solution zip path'
  condition: and(succeeded(), ne('${{parameters.importUnmanaged}}', 'true'))

# If the TriggerSolutionUpgrade variable is false, then import the solution as an Update
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.import-solution.PowerPlatformImportSolution@0
  displayName: 'Import Managed Solution as Update'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: '${{parameters.serviceConnection}}'
    SolutionInputFile: $(ManagedSolutionPath)
    PublishWorkflows: true
    OverwriteUnmanagedCustomizations: ${{parameters.overwriteUnmanagedCustomizations}}
    UseDeploymentSettingsFile: $(UseDeploymentSettings)
    DeploymentSettingsFile: $(DeploymentSettingsPath)
  condition: and(succeeded(), ne('${{parameters.importUnmanaged}}', 'true'))

- powershell: |
    $path = "$(Build.SourcesDirectory)\Configuration\_common\Data"
    if(Test-Path $path) {
      echo "##vso[task.setvariable variable=importCommonDataConfig]true"
      $compress = @{
        Path = $path + '\*.*'
        CompressionLevel = 'Fastest'
        DestinationPath = '$(Build.ArtifactStagingDirectory)/ConfigData.zip'
      }
      Compress-Archive @compress
    }

    $path = "$(Build.SourcesDirectory)\Configuration\$(EnvironmentName)\Data"
    if(Test-Path $path) {
      echo "##vso[task.setvariable variable=importEnvDataConfig]true"
      $compress = @{
        Path = $path + '\*.*'
        CompressionLevel = 'Fastest'
        DestinationPath = '$(Build.ArtifactStagingDirectory)/ConfigData-$(EnvironmentName).zip'
      }
      Compress-Archive @compress
    }
  displayName: 'Archive Configuration Migration Data'
  enabled: true

- ${{ if eq('$(importCommonDataConfig)', 'true') }}:
  - template: import-configuration-data.yml
    parameters:
      environmentName: '$(EnvironmentName)'
      configDataFile: '$(Build.ArtifactStagingDirectory)/ConfigData.zip'

- ${{ if eq('$(importEnvDataConfig)', 'true') }}:
  - template: import-configuration-data.yml
    parameters:
      environmentName: '$(EnvironmentName)'
      configDataFile: '$(Build.ArtifactStagingDirectory)/ConfigData-$(EnvironmentName).zip'
