# This is a deployment template referenced from build-deploy-Solution.yml

# build-deploy-Solution.yml calls this template twice, passing different connection information for test vs prod
parameters:
- name: serviceConnection
  type: string
- name: importUnmanaged
  type: string
  default: false
- name: overwriteUnmanagedCustomizations
  type: string
  default: true
- name: importCommonData
  type: string
  default: false
- name: importEnvSpecificData
  type: string
  default: false

steps:
- script: |
    git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" pull origin $(Build.SourceBranchName)
  workingDirectory: $(Build.SourcesDirectory)
  displayName: 'Git: Get latest version'

- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.tool-installer.PowerPlatformToolInstaller@0
  displayName: 'Install Power Platform Build Tools'

# Get the solution package from artifact uploaded by the build pipeline
- task: DownloadPipelineArtifact@2
  displayName: 'Download Build Pipeline Artifact'

- powershell: |
   $artifactDropPath = '$(Pipeline.Workspace)/drop/'
   If (Test-Path -Path "$(Pipeline.Workspace)/buildPipeline/drop")
   {
       $artifactDropPath = "$(Pipeline.Workspace)/buildPipeline/drop/"
   }
   Write-Host "##vso[task.setVariable variable=ArtifactDropPath]$artifactDropPath"
  displayName: 'Get artifact drop path'

# Set paths to deployment settings
- template: set-deployment-configuration-paths.yml
  parameters:
    environmentName: $(EnvironmentName)

# Set pipeline vars for tools paths.
- ${{ if eq(parameters.importUnmanaged, 'true') }}:
  - template: set-tools-paths.yml

# Restore PowerShell Module dependencies if available in cache
# https://docs.microsoft.com/en-us/azure/devops/pipelines/release/caching?view=azure-devops
- task: Cache@2
  displayName: Cache Powershell Modules
  inputs:
    key:  restoremodules | "$(powerPlatformToolsSubPath)" | $(Build.SourcesDirectory)/Pipelines/Templates/install-powershell-modules.yml
    path: $(powerPlatformToolsPath)
    cacheHitVar: powerPlatformToolsPath_IsCached
  condition: and(succeeded(), eq('${{parameters.importUnmanaged}}', 'true'))

- ${{ if and(eq(parameters.importUnmanaged, 'true'), ne(variables.powerPlatformToolsPath_IsCached, 'true')) }}:
  - template: install-powershell-modules.yml

# If called from import-unmanaged-to-dev-environment.yml, this task will run to deploy an unmanaged solution
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.import-solution.PowerPlatformImportSolution@0
  displayName: 'Import Unmanaged Solution'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: '${{parameters.serviceConnection}}'
    SolutionInputFile: '$(ArtifactDropPath)/$(SolutionName)_$(SolutionVersion).zip'
    PublishWorkflows: true
    UseDeploymentSettingsFile: $(UseDeploymentSettings)
    DeploymentSettingsFile: $(DeploymentSettingsPath)
    AsyncOperation: true
    MaxAsyncWaitTime: 120
  condition: and(succeeded(), eq('${{parameters.importUnmanaged}}', 'true'))
  enabled: false

- powershell: |
    $microsoftXrmDataPowerShellModule = '$(Microsoft_Xrm_Data_PowerShell)'
    Import-Module $microsoftXrmDataPowerShellModule -Force -RequiredVersion $(XrmDataPowerShellVersion) -ArgumentList @{ NonInteractive = $true }
    $conn = Get-CrmConnection -ConnectionString "$(CdsBaseConnectionString)${{parameters.serviceConnection}}"
    Write-Host "Publish customizations using PowerShell CmdLet (to be removed when timeout issue is fixed on Power Build Tools)"
    Publish-CrmAllCustomization -conn $conn
  displayName: 'Publish All Customizations'
  condition: and(succeeded(), eq('${{parameters.importUnmanaged}}', 'true'))

# Only publish customizations for when importing unmanaged solutions into a dev environment.
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.publish-customizations.PowerPlatformPublishCustomizations@0
  displayName: 'Power Platform Publish Customizations '
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: '${{parameters.serviceConnection}}'
  condition: and(succeeded(), eq('${{parameters.importUnmanaged}}', 'true'))
  timeoutInMinutes: 20
  retryCountOnTaskFailure: 3
  enabled: false

- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.import-solution.PowerPlatformImportSolution@0
  displayName: 'Import Managed Solution as Upgrade'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: '${{parameters.serviceConnection}}'
    SolutionInputFile: '$(ArtifactDropPath)/$(SolutionName)_$(SolutionVersion)_managed.zip'
    PublishWorkflows: true
    HoldingSolution: true
    OverwriteUnmanagedCustomizations: ${{parameters.overwriteUnmanagedCustomizations}}
    UseDeploymentSettingsFile: $(UseDeploymentSettings)
    DeploymentSettingsFile: $(DeploymentSettingsPath)
  condition: and(succeeded(), ne('${{parameters.importUnmanaged}}', 'true'))

- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.apply-solution-upgrade.PowerPlatformApplySolutionUpgrade@0
  inputs:
    authenticationType: 'PowerPlatformSPN'
    PowerPlatformSPN: '${{parameters.serviceConnection}}'
    SolutionName: '$(SolutionName)'
    AsyncOperation: true
  condition: and(succeeded(), ne('${{parameters.importUnmanaged}}', 'true'))

- ${{ if or(eq(parameters.importCommonData, true), eq(parameters.importEnvSpecificData, true)) }}:
  - powershell: |
      $path = "$(Build.SourcesDirectory)\Configuration\_common\Data"
      if(Test-Path $path) {
        $compress = @{
          Path = $path + '\*.*'
          CompressionLevel = 'Fastest'
          DestinationPath = '$(Build.ArtifactStagingDirectory)/ConfigData.zip'
        }
        Compress-Archive @compress
      }

      $path = "$(Build.SourcesDirectory)\Configuration\$(EnvironmentName)\Data"
      if(Test-Path $path) {
        $compress = @{
          Path = $path + '\*.*'
          CompressionLevel = 'Fastest'
          DestinationPath = '$(Build.ArtifactStagingDirectory)/ConfigData-$(EnvironmentName).zip'
        }
        Compress-Archive @compress
      }
    displayName: 'Zip Configuration Migration Data from Repo'
    enabled: true

- ${{ if eq(parameters.importCommonData, true) }}:
  - template: import-configuration-data.yml
    parameters:
      environmentName: '$(EnvironmentName)'
      configDataFile: "$(Build.ArtifactStagingDirectory)/ConfigData.zip"

- ${{ if eq(parameters.importEnvSpecificData, true) }}:
  - template: import-configuration-data.yml
    parameters:
      environmentName: '$(EnvironmentName)'
      configDataFile: "$(Build.ArtifactStagingDirectory)/ConfigData-$(EnvironmentName).zip"
