parameters:
- name: buildType
  type: string
  default: 'Both'
  values:
  - Both
  - Managed
  - Unmanaged

steps:  
# Set pipeline vars for tools paths.
- template: set-tools-paths.yml
    
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.tool-installer.PowerPlatformToolInstaller@0
  displayName: 'Install Power Platform Build Tools'

#Pack the solution based on the build type parameter (Unmanaged, Managed or Both)
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.pack-solution.PowerPlatformPackSolution@0
  displayName: 'Pack Solutions (Unmanaged and/or Managed)'
  inputs:
    SolutionSourceFolder: $(Build.SourcesDirectory)\Solutions\$(SolutionName)
    SolutionOutputFile: '$(Build.ArtifactStagingDirectory)\$(SolutionName)_$(Build.BuildNumber).zip'
    SolutionType: ${{parameters.buildType}}

# We'll store configuration data as artifacts on the build pipeline to be used during deployment. This includes configuration data created via Configuration data migration tool and deploymentSettings.json and customDeploymentSettings.json 
- powershell: |
    $path = "$(Build.SourcesDirectory)\Solutions\$(SolutionName)\config\ConfigurationMigrationData"
    if(Test-Path $path) {
        $compress = @{
            Path = $path + '\*.*'
            CompressionLevel = 'Fastest'
            DestinationPath = '$(Build.ArtifactStagingDirectory)/ConfigurationMigrationData.zip'
        }
        Compress-Archive @compress
    }
    $settingFiles = @("deploymentSettings","customDeploymentSettings")

    foreach ($settingFile in $settingFiles) {
        $path = "$(Build.SourcesDirectory)\Solutions\$(SolutionName)\config\$settingFile.json"
        if(Test-Path $path) {
            Copy-Item $path "$(Build.ArtifactStagingDirectory)/$settingFile.json"
        }
    }

    if(Test-Path "$(Build.SourcesDirectory)\Solutions\$(SolutionName)\config") {
        Get-ChildItem -Path "$(Build.SourcesDirectory)\Solutions\$(SolutionName)\config" | 
        ForEach-Object {
            $environment = $_.Name
            $path = "$(Build.SourcesDirectory)\Solutions\$(SolutionName)\config\$environment\ConfigurationMigrationData"
            if(Test-Path $path) {
                $compress = @{
                    Path = $path + '\*.*'
                    CompressionLevel = 'Fastest'
                    DestinationPath = '$(Build.ArtifactStagingDirectory)/ConfigurationMigrationData-' + $environment + '.zip'
                }
                Compress-Archive @compress
            }
            foreach ($settingFile in $settingFiles) {
                $path = "$(Build.SourcesDirectory)\Solutions\$(SolutionName)\config\$environment\$settingFile.json"
                if(Test-Path $path) {
                    Copy-Item $path "$(Build.ArtifactStagingDirectory)/$settingFile-$environment.json"
                }
            }
        }
    }
  displayName: 'Archive Configuration Migration Data'

- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifacts'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifact: drop

#Run Solution Checker against our solution. This is currently only triggered for pipelines that trigger for Pull Requests
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.checker.PowerPlatformChecker@0
  displayName: 'Run Solution Checker'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: '$(ServiceConnection)'
    FilesToAnalyze: '$(Build.ArtifactStagingDirectory)\$(SolutionName)_$(Build.BuildNumber).zip'
    RuleSet: '0ad12346-e108-40b8-a956-9a8f95ea18c9'
  condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
