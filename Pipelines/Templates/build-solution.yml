parameters:
- name: buildType
  displayName: Build Type
  type: string
  default: 'Both'
  values:
  - Both
  - Managed
  - Unmanaged
- name: exportManaged
  displayName: Export managed solution (Instead of Packing)
  type: boolean
  default: false
- name: mapCodeComponents
  displayName: Map Code Based Components from Git
  type: boolean
  default: true

steps:
- script: |
    git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" pull origin $(Build.SourceBranchName)
  workingDirectory: $(Build.SourcesDirectory)
  displayName: 'Git: Get latest version'
  
# Set pipeline vars for tools paths.
- template: set-tools-paths.yml
    
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.tool-installer.PowerPlatformToolInstaller@0
  displayName: 'Install Power Platform Build Tools'

# Before we committed changes, we formatted all json files for readability in source control.  This breaks solution package, so we need to flatten them before packing   
- pwsh: |
    #When we unpack the solution files, we format the json, but it causes solution import failures so we need to flatten the files
    Get-ChildItem -Path "$(Build.SourcesDirectory)\Solutions\$(SolutionName)" -Recurse -Filter *.json |
    ForEach-Object {
        $fileContent = (Get-Content $_.FullName) -join ' '
        if(-not [string]::IsNullOrWhiteSpace($fileContent)) {
            Set-Content $_.FullName $fileContent
        }
    }
  displayName: 'Flatten JSON files'
  enabled: true

#If we need to export the managed solution we do it here and then we take care of the other scenarios with Power Build Tools or Solution Packager
- ${{ if and(eq(parameters.exportManaged, true), ne(parameters.buildType, 'Unmanaged')) }}:
  - task: microsoft-IsvExpTools.PowerPlatform-BuildTools.export-solution.PowerPlatformExportSolution@0
    displayName: 'Export Managed Solution'
    inputs:
      authenticationType: PowerPlatformSPN
      PowerPlatformSPN: '$(EnvironmentUrl)'
      SolutionName: '$(SolutionName)'
      SolutionOutputFile: '$(Build.ArtifactStagingDirectory)\$(SolutionName)_$(SolutionVersion)_managed.zip'
      Managed: true

#If no need to map the components then we use the normal packing feature from Power Build Tools
- ${{ if eq(parameters.mapCodeComponents, false) }}:
  #If no need to export the managed solution
  - ${{ if eq(parameters.exportManaged, false) }}:
    - task: microsoft-IsvExpTools.PowerPlatform-BuildTools.pack-solution.PowerPlatformPackSolution@0
      displayName: 'Pack Solutions using Power Platform Build Tools'
      inputs:
        SolutionSourceFolder: $(Build.SourcesDirectory)\Solutions\$(SolutionName)
        SolutionOutputFile: '$(Build.ArtifactStagingDirectory)\$(SolutionName)_$(SolutionVersion)_managed.zip'
        SolutionType: ${{parameters.buildType}}
  - ${{ elseif ne(parameters.buildType, 'Managed') }}: #Export the managed solution instead of packing it from the source code
    - task: microsoft-IsvExpTools.PowerPlatform-BuildTools.pack-solution.PowerPlatformPackSolution@0
      displayName: 'Pack Unmanaged Solution using Power Platform Build Tools'
      inputs:
        SolutionSourceFolder: $(Build.SourcesDirectory)\Solutions\$(SolutionName)
        SolutionOutputFile: '$(Build.ArtifactStagingDirectory)\$(SolutionName)_$(SolutionVersion)_managed.zip'
        SolutionType: 'Unmanaged'
- ${{ elseif eq(parameters.exportManaged, false) }}: # If we need to map the components then we use the solution packager
  - powershell: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      $sourceNugetExe = "https://dist.nuget.org/win-x86-commandline/latest/nuget.exe"
      $targetNugetExe = ".\nuget.exe"
      Invoke-WebRequest $sourceNugetExe -OutFile $targetNugetExe
      Set-Alias nuget $targetNugetExe -Scope Global -Verbose
      
      ./nuget install  Microsoft.CrmSdk.CoreTools -O ./
      $coreToolsFolder = Get-ChildItem ./ | Where-Object {$_.Name -match 'Microsoft.CrmSdk.CoreTools.'}
      move .\$coreToolsFolder\content\bin\coretools\*.* .\
      Remove-Item .\$coreToolsFolder -Force -Recurse
      .\SolutionPackager.exe /action "Pack" /zipFile '$(Build.ArtifactStagingDirectory)\$(SolutionName)_$(SolutionVersion).zip' /folder $(UnpackedFolder) /packagetype ${{parameters.buildType}} /errorlevel 'Warning' /map $(BuildMappingFile)
    failOnStderr: true
    displayName: 'Pack Solutions using Solution Packager'
- ${{ elseif ne(parameters.buildType, 'Managed')}}:
  - powershell: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      $sourceNugetExe = "https://dist.nuget.org/win-x86-commandline/latest/nuget.exe"
      $targetNugetExe = ".\nuget.exe"
      Invoke-WebRequest $sourceNugetExe -OutFile $targetNugetExe
      Set-Alias nuget $targetNugetExe -Scope Global -Verbose
      
      ./nuget install  Microsoft.CrmSdk.CoreTools -O ./
      $coreToolsFolder = Get-ChildItem ./ | Where-Object {$_.Name -match 'Microsoft.CrmSdk.CoreTools.'}
      move .\$coreToolsFolder\content\bin\coretools\*.* .\
      Remove-Item .\$coreToolsFolder -Force -Recurse
      .\SolutionPackager.exe /action "Pack" /zipFile '$(Build.ArtifactStagingDirectory)\$(SolutionName)_$(SolutionVersion).zip' /folder $(UnpackedFolder) /packagetype 'Unmanaged' /errorlevel 'Warning' /map $(BuildMappingFile)
    failOnStderr: true
    displayName: 'Pack Unmanaged Solution using Solution Packager'
- powershell: |
    if(Test-Path "$(Build.SourcesDirectory)\Configuration") {
        Get-ChildItem -Path "$(Build.SourcesDirectory)\Configuration" | 
        ForEach-Object {
            $environment = $_.Name
            $configZipFile = If ($environment -eq "_common") {'$(Build.ArtifactStagingDirectory)/ConfigData.zip'} Else {'$(Build.ArtifactStagingDirectory)/ConfigData-' + $environment + '.zip'}
            $path = "$(Build.SourcesDirectory)\Configuration\$environment\Data"
            if(Test-Path $path) {
                $compress = @{
                    Path = $path + '\*.*'
                    CompressionLevel = 'Fastest'
                    DestinationPath = $configZipFile
                }
                Compress-Archive @compress
            }
        }
    }
  displayName: 'Archive Configuration Migration Data'
  enabled: false

- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifacts'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifact: drop

#Run Solution Checker against our solution. This is currently only triggered for pipelines that trigger for Pull Requests
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.checker.PowerPlatformChecker@0
  displayName: 'Run Solution Checker'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: '$(EnvironmentUrl)'
    FilesToAnalyze: '$(Build.ArtifactStagingDirectory)\$(SolutionName)_$(SolutionVersion).zip'
    RuleSet: '0ad12346-e108-40b8-a956-9a8f95ea18c9'
# condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
